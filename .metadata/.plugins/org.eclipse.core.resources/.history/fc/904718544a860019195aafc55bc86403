package Streams;

import java.util.Arrays;
import java.util.List;

public class Filtering {

	/*
	 * Stream filter (Predicate predicate) returns a stream consisting of the
	 * elements of this stream that match the given predicate. This is an
	 * INTERMEDIATE OPERATION. These operations are always lazy i.e., executing
	 * an intermediate operation such as 'filter()' does not actually perform
	 * any filtering, but instead creates a new stream that, when traversed,
	 * contains the elements of the initial stream that match the given
	 * predicate.
	 */

	public static void main(String[] args) {

		/**
		 * Example 1: filter() method with operation of filtering out the
		 * elements divisible by 5
		 **/
		//create a list of integers
		List<Integer> numberList = Arrays.asList(3,4,6, 12, 20);
		
		//using Stream filter (Predicate predicate)
		//to get a stream consisting of the elements 
		//that are divisible by 5
		numberList.stream().map(num-> num % 5 == 0).forEach(System.out::println);
		
		
	}
}
