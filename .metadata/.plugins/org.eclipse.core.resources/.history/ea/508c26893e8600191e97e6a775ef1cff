package Streams;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public class Mapping {

	/*
	 * Stream map(Function mapper) returns a stream consisting of the results of applying the 
	 * given function to the elements of this stream.
	 * 
	 * Stream map (Function mapper) is an INTERMEDIATE OPERATION. These operations are always lazy. 
	 * Intermediate operations are invoked on a Stream instance and after they finish their
	 * processing, they give a Stream instance as output.
	 * 
	 * 
	 */
	
	public static void main(String[] args) {
		
		//Stream map() function with operation of number * 3 on each element of stream
		
		List<Integer> numberList = Arrays.asList(2,3,4,5,6,7);
		
		numberList.stream().map(x -> x * x).forEach(System.out::println);
		
	}
	}

